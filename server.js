require("dotenv").config();
const express = require("express");
const { Pool } = require("pg");
const cors = require("cors");

const app = express();
const PORT = process.env.PORT || 80;

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  ssl: {
    rejectUnauthorized: false,
  },
});

app.use(cors());
app.use(express.json());
app.use(express.static("public"));

const initializeDatabase = async () => {
  const client = await pool.connect();
  try {
    await client.query(`
            CREATE TABLE IF NOT EXISTS products (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                quantity INTEGER NOT NULL,
                price NUMERIC(10, 2) NOT NULL,
                description TEXT,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW()
            )
        `);

    const res = await client.query("SELECT COUNT(*) FROM products");
    if (res.rows[0].count > 0) {
      console.log("La base de datos ya contiene datos.");
      return;
    }

    console.log("Insertando datos de ejemplo...");
    const sampleProducts = [
      ["Laptop Pro", "Electronics", 15, 1299.99, "High-performance laptop"],
      ["Wireless Mouse", "Electronics", 45, 29.99, "Ergonomic wireless mouse"],
      ["Office Chair", "Furniture", 8, 199.99, "Comfortable office chair"],
      ["Coffee Beans", "Food", 120, 12.99, "Premium coffee beans"],
      ["Notebook Set", "Office Supplies", 200, 8.99, "Pack of 3 notebooks"],
    ];
    const queryText =
      "INSERT INTO products (name, category, quantity, price, description) VALUES ($1, $2, $3, $4, $5)";
    for (const product of sampleProducts) {
      await client.query(queryText, product);
    }
    console.log("Datos de ejemplo insertados.");
  } finally {
    client.release();
  }
};

app.get("/api/products", async (req, res) => {
  try {
    const { rows } = await pool.query(
      "SELECT * FROM products ORDER BY created_at DESC"
    );
    res.json(rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/products/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const { rows } = await pool.query("SELECT * FROM products WHERE id = $1", [
      id,
    ]);
    if (rows.length === 0) {
      return res.status(404).json({ error: "Product not found" });
    }
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/api/products", async (req, res) => {
  const { name, category, quantity, price, description } = req.body;
  if (!name || !category || quantity === undefined || price === undefined) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const query =
      "INSERT INTO products (name, category, quantity, price, description) VALUES ($1, $2, $3, $4, $5) RETURNING id";
    const values = [name, category, quantity, price, description];
    const result = await pool.query(query, values);

    res
      .status(201)
      .json({ id: result.rows[0].id, message: "Product created successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.put("/api/products/:id", async (req, res) => {
  const { id } = req.params;
  const { name, category, quantity, price, description } = req.body;

  try {
    const query =
      "UPDATE products SET name = $1, category = $2, quantity = $3, price = $4, description = $5, updated_at = NOW() WHERE id = $6";
    const values = [name, category, quantity, price, description, id];
    const result = await pool.query(query, values);

    if (result.rowCount === 0) {
      return res.status(404).json({ error: "Product not found" });
    }
    res.json({ message: "Product updated successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.delete("/api/products/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query("DELETE FROM products WHERE id = $1", [id]);
    if (result.rowCount === 0) {
      return res.status(404).json({ error: "Product not found" });
    }
    res.json({ message: "Product deleted successfully" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/api/stats", async (req, res) => {
  try {
    const query = `
      SELECT 
        COUNT(*) as total_products,
        SUM(quantity) as total_items,
        COUNT(DISTINCT category) as categories,
        SUM(quantity * price) as total_value
      FROM products
    `;
    const { rows } = await pool.query(query);
    res.json(rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

const startServer = async () => {
  try {
    const client = await pool.connect();
    console.log("Conexión a la base de datos establecida con éxito.");
    client.release();

    await initializeDatabase();

    app.listen(PORT, () => {
      console.log(`Servidor corriendo y escuchando en el puerto ${PORT}`);
    });
  } catch (err) {
    console.error("ERROR FATAL: No se pudo conectar a la base de datos.", err);
    process.exit(1);
  }
};

startServer();
